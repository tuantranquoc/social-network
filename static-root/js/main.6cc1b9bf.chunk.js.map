{"version":3,"sources":["logo.svg","lookup/lookup_components.js","tweets/button.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/tweet_components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","console","log","xhr","XMLHttpRequest","url","open","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","setRequestHeader","responseType","onload","response","status","onerror","e","send","ActionBtn","props","tweet","didPerformAction","action","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","event","preventDefault","id","tweetId","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","handlePerformAction","newActionTweet","path","window","location","pathname","idRegex","match","urlTweetId","groups","isDetail","content","Fragment","href","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidCall","setTweetsDidCall","useEffect","final","newTweet","concat","username","apiTweetList","alert","handleDidRetweet","updateTweetInit","unshift","updateFinalTweetInit","map","item","index","key","TweetCreate","didTweet","textAreaRef","React","createRef","handleBackEndUpdate","onSubmit","newVal","current","value","ref","TweetComponent","canTweet","newTweets","setNewTweet","tempNewTweet","TweetDetailComponent","didLookup","setDidLookUp","setTweet","handleBackendLookUp","App","src","logo","alt","Boolean","hostname","getElementById","ReactDOM","render","StrictMode","createElement","tweetEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6cc1b9bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nfunction getCookie(name) {\r\n    var cookieValue = null;\r\n    if (document.cookie && document.cookie !== '') {\r\n        var cookies = document.cookie.split(';');\r\n        for (var i = 0; i < cookies.length; i++) {\r\n            var cookie = cookies[i].trim();\r\n            // Does this cookie string begin with the name we want?\r\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n    let jsonData;\r\n    if (data) {\r\n        jsonData = JSON.stringify(data);\r\n    }\r\n    console.log(\"jsonData\",jsonData);\r\n    // getting html elements\r\n    const xhr = new XMLHttpRequest();\r\n    // `http://localhost:8000/api${endpoint}`\r\n    const url = `http://localhost:8000/api${endpoint}`;\r\n    xhr.open(method, url);\r\n    const csrftoken = getCookie('csrftoken');\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    if (csrftoken) {\r\n\r\n\r\n    }\r\n\r\n\r\n    xhr.responseType = \"json\";\r\n    xhr.onload = function () {\r\n        callback(xhr.response, xhr.status)\r\n    };\r\n    xhr.onerror = function (e) {\r\n        console.log(e);\r\n        callback({\"message\": \"the request was an error!\"}, 400)\r\n    };\r\n    xhr.send(jsonData);\r\n}\r\n\r\n\r\n","import {apiTweetAction} from \"./lookup\";\r\nimport React from \"react\";\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, didPerformAction, action} = props;\r\n    const likes = tweet.likes ? tweet.likes : 0;\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm';\r\n    const actionDisplay = action.display ? action.display : 'Action';\r\n    const handleActionBackendEvent = (response, status) => {\r\n        console.log(status, response);\r\n        if ((status === 201 || status === 200) && didPerformAction) {\r\n            didPerformAction(response, status);\r\n            //   setUserLikes(true)\r\n        }\r\n\r\n    };\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        console.log(\"tweet_id\", tweet.id);\r\n        apiTweetAction(tweet.id, action.type, handleActionBackendEvent);\r\n\r\n    };\r\n    const display = action.type === \"like\" ? likes + \" \" + action.type : actionDisplay;\r\n    return <button className={className} onClick={handleClick}>{display}</button>;\r\n}","import {backendLookup} from \"../lookup/lookup_components\";\r\n\r\nexport function apiTweetCreate(newTweet, callback) {\r\n    const data = {content: newTweet};\r\n    backendLookup(\"POST\", \"/tweets/create/\", callback, data)\r\n}\r\n\r\nexport function apiTweetAction(tweetId, action, callback) {\r\n    const data = {id: tweetId, action: action};\r\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data)\r\n}\r\n\r\nexport function apiTweetDetail(tweet_id, callback) {\r\n    backendLookup(\"GET\", `/tweets/${tweet_id}/`, callback,)\r\n}\r\n\r\nexport function apiTweetList(username, callback) {\r\n    let endpoint = \"/tweets/\";\r\n    if (username) {\r\n        endpoint = `/tweets/?username=${username}`;\r\n    }\r\n    backendLookup(\"GET\", endpoint, callback,)\r\n}","import React, {useState} from \"react\";\r\nimport {ActionBtn} from \"./button\";\r\n\r\nexport function ParentTweet(props) {\r\n    const {tweet} = props;\r\n    return tweet.parent ? <div className='row'>\r\n        <div className='col-11 mx-auto p-3 border rounded'>\r\n            <p className='mb-0 text-muted small'>ReTweet</p>\r\n            <Tweet hideActions className={' '} tweet={tweet.parent}/>\r\n        </div>\r\n    </div> : null\r\n}\r\n\r\nexport function Tweet(props) {\r\n    const {tweet, didRetweet, hideActions} = props;\r\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null);\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\r\n    const handlePerformAction = (newActionTweet, status) => {\r\n        if (status === 200) {\r\n            setActionTweet(newActionTweet);\r\n        } else if (status === 201) {\r\n            //let 'em known tweet created\r\n            if (didRetweet) {\r\n                didRetweet(newActionTweet)\r\n            }\r\n        }\r\n    };\r\n\r\n    const path = window.location.pathname;\r\n    const idRegex = /(?<id>\\d+)/;\r\n    const match = path.match(idRegex);\r\n    const urlTweetId = match ? match.groups.id : -1;\r\n    const isDetail = `${tweet.id}` === `${urlTweetId}`;\r\n    const handleLink = (event) => {\r\n        event.preventDefault();\r\n        window.location.href = `/${tweet.id}`\r\n    };\r\n    return <div className={className}>\r\n        <div>\r\n            <p>{tweet.id} - {tweet.content}</p>\r\n            <ParentTweet tweet={tweet}/>\r\n        </div>\r\n         <div className=\"btn btn-group-justified\">\r\n           {(actionTweet && hideActions !== true) && <React.Fragment>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\r\n                       action={{type: \"like\", display: \"Likes\"}}/>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\r\n                       action={{type: \"unlike\", display: \"UnLike\"}}/>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction}\r\n                       action={{type: \"retweet\", display: \"ReTweet\"}}/></React.Fragment>}\r\n            {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>\r\n                View\r\n            </button>}\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {apiTweetList} from \"./lookup\";\r\nimport {Tweet} from \"./detail\";\r\n\r\nexport function TweetList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([]);\r\n    const [tweetsDidCall, setTweetsDidCall] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const final = [...props.newTweet].concat(tweetsInit);\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final)\r\n        }\r\n\r\n    }, [props.newTweet, tweets, tweetsInit]);\r\n    useEffect(() => {\r\n        // do my lookup\r\n        if (tweetsDidCall === false) {\r\n            const handleTweetLookup = (response, status) => {\r\n                if (status === 200) {\r\n                    setTweetsInit(response);\r\n                    setTweetsDidCall(true)\r\n                } else alert(\"There was an error\");\r\n            };\r\n            apiTweetList(props.username, handleTweetLookup);\r\n        }\r\n    }, [tweets, tweetsDidCall, setTweetsDidCall, props.username]);\r\n\r\n    const handleDidRetweet = (newTweet) => {\r\n        const updateTweetInit = [...tweetsInit];\r\n        updateTweetInit.unshift(newTweet);\r\n        setTweetsInit(updateTweetInit);\r\n        const updateFinalTweetInit = [...tweets];\r\n        updateFinalTweetInit.unshift(tweets);\r\n        setTweets(updateFinalTweetInit)\r\n    };\r\n    return tweets.map((item, index) => {\r\n        return <Tweet\r\n            tweet={item}\r\n            didRetweet={handleDidRetweet}\r\n            className=\"my-5 py-5 border bg-white text-dark\"\r\n            key={`${index}-{item.id}`}/>\r\n    })\r\n}","import React from \"react\";\r\nimport {apiTweetCreate} from \"./lookup\";\r\n\r\n\r\n\r\nexport function TweetCreate(props) {\r\n    console.log(props);\r\n    // ...props === username\r\n    const {username} = props;\r\n    const {didTweet} = props;\r\n    const textAreaRef = React.createRef();\r\n    const handleBackEndUpdate =\r\n        (response, status) => {\r\n            // backend api response\r\n            if (status === 201) {\r\n                didTweet(response);\r\n            } else {\r\n                console.log(\"response\", response);\r\n                alert(\"An error occured please try again later!\")\r\n            }\r\n        };\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newVal = textAreaRef.current.value;\r\n        // backend api request\r\n        apiTweetCreate(newVal, handleBackEndUpdate);\r\n        textAreaRef.current.value = '';\r\n    };\r\n\r\n    return <div className={props.className}>\r\n        <form onSubmit={handleSubmit}>\r\n                <textarea ref={textAreaRef} className='form-control' name='tweet'>\r\n                </textarea>\r\n            <button className='btn btn-primary my-3'>Tweet</button>\r\n        </form>\r\n    </div>\r\n}\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {TweetList} from \"./list\";\r\nimport {TweetCreate} from \"./create\";\r\nimport {apiTweetDetail} from \"./lookup\"\r\nimport {Tweet} from \"./detail\";\r\n\r\nexport function TweetComponent(props) {\r\n    console.log(props);\r\n    const canTweet = props.canTweet !== \"false\";\r\n\r\n    const [newTweets, setNewTweet] = useState([]);\r\n    const handleNewTweet =\r\n        (newTweet) => {\r\n            console.log(\"new tweet\", [...newTweets]);\r\n            let tempNewTweet = [...newTweets];\r\n            tempNewTweet.unshift(newTweet);\r\n            setNewTweet(tempNewTweet);\r\n        };\r\n    return <div className={props.className}>\r\n        {(canTweet === true) && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3'/>}\r\n\r\n        <TweetList newTweet={newTweets} {...props}/>\r\n    </div>\r\n}\r\n\r\nexport function TweetDetailComponent(props) {\r\n    const {tweetId} = props;\r\n    const [didLookup, setDidLookUp] = useState(false);\r\n    const [tweet, setTweet] = useState(null);\r\n    const handleBackendLookUp = (response, status) => {\r\n        if (status === 200) {\r\n            console.log(\"set tweet\", response);\r\n            setTweet(response)\r\n        } else {\r\n            alert(\"There was an error finding your tweet! TweetDetailComponent!\")\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        if (didLookup === false) {\r\n            apiTweetDetail(tweetId, handleBackendLookUp)\r\n            setDidLookUp(true)\r\n        }\r\n    }, [tweetId, didLookup, setDidLookUp]);\r\n    return tweet === null ? null : <Tweet tweet={tweet}\r\n                                          className={props.className}/>\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetComponent} from \"./tweets\";\n\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <div>\n                    <TweetComponent/>\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {TweetComponent, TweetDetailComponent} from \"./tweets\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nconst e = React.createElement;\nconst tweetEl = document.getElementById(\"tweetme-2\");\nif (tweetEl) {\n    ReactDOM.render(e(TweetComponent, tweetEl.dataset), tweetEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".tweetme-2-detail\")\ntweetDetailElements.forEach(container =>{\n    ReactDOM.render(e(TweetDetailComponent, container.dataset), container);\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}