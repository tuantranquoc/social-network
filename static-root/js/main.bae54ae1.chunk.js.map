{"version":3,"sources":["logo.svg","tweets/tweet_components.js","lookup/lookup_components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ActionBtn","props","tweet","action","useState","likes","setLikes","userLikes","setUserLikes","className","actionDisplay","display","type","onClick","event","preventDefault","Tweet","id","content","TweetList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","newTweet","concat","length","console","log","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","LoadTweets","map","item","index","key","TweetComponent","setNewTweet","textAreaRef","React","createRef","onSubmit","newVal","current","value","tempNewTweet","unshift","ref","name","App","src","logo","alt","Boolean","window","location","hostname","match","document","getElementById","ReactDOM","render","StrictMode","tweetEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bae54ae1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from \"react\";\r\nimport {LoadTweets} from \"../lookup\";\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action} = props;\r\n    let [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\r\n    let [userLikes, setUserLikes] = useState(tweet.userLikes === true);\r\n\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm';\r\n    const actionDisplay = action.display ? action.display : 'Action';\r\n\r\n    const handleClick = (event) => {\r\n        event.preventDefault();\r\n        if (action.type === 'like') {\r\n            if (userLikes === true) {\r\n                setLikes(likes - 1);\r\n                setUserLikes(false)\r\n            } else {\r\n                setLikes(likes + 1);\r\n                setUserLikes(true);\r\n            }\r\n        }\r\n    };\r\n    const display = action.type === \"like\" ? likes + \" \" + action.type : actionDisplay;\r\n    return <button className={className} onClick={handleClick}>{display}</button>;\r\n}\r\n\r\n\r\nexport function Tweet(props) {\r\n    const {tweet} = props;\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\r\n    return <div className={className}><p>{tweet.id} - {tweet.content}</p>\r\n        <div className=\"btn btn-group-justified\">\r\n            <ActionBtn tweet={tweet} action={{type: \"like\", display: \"Likes\"}}/>\r\n            <ActionBtn tweet={tweet} action={{type: \"unlike\", display: \"UnLike\"}}/>\r\n            <ActionBtn tweet={tweet} action={{type: \"retweet\", display: \"ReTweet\"}}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nexport function TweetList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([]);\r\n    useEffect(() => {\r\n        let final = [...props.newTweet].concat(tweetsInit);\r\n        if (final.length !== tweets.length){\r\n            setTweets(final);\r\n        }\r\n\r\n    }, [props.newTweet,tweets,tweetsInit]);\r\n    console.log(props.newTweet);\r\n    useEffect(() => {\r\n        // do my lookup\r\n        const myCallBack = (response, status) => {\r\n            console.log(response, status);\r\n            const finalTweetInit = [...response].concat(tweetsInit);\r\n            if (status === 200) {\r\n                setTweetsInit(response)\r\n            }\r\n        };\r\n        LoadTweets(myCallBack);\r\n    }, [tweetsInit]);\r\n    return tweets.map((item, index) => {\r\n        return <Tweet tweet={item} className=\"my-5 py-5 border bg-white text-dark\"\r\n                      key={'${index}-{item.id}'}/>\r\n    })\r\n}\r\n\r\nexport function TweetComponent(props) {\r\n    const [newTweet, setNewTweet] = useState([]);\r\n    const textAreaRef = React.createRef();\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newVal = textAreaRef.current.value;\r\n        let tempNewTweet = [...newTweet];\r\n        tempNewTweet.unshift({\r\n            content: newVal,\r\n            likes: 1,\r\n            id: 123456\r\n        });\r\n        console.log(newVal);\r\n        setNewTweet(tempNewTweet);\r\n        textAreaRef.current.value = '';\r\n    };\r\n\r\n    return <div className={props.className}>\r\n        <div className='col-12 mb-3'>\r\n            <form onSubmit={handleSubmit}>\r\n        <textarea ref={textAreaRef} className='form-control' name='tweet'>\r\n\r\n        </textarea>\r\n                <button className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n        </div>\r\n        <TweetList newTweet={newTweet}/>\r\n    </div>\r\n}\r\n","\r\n\r\nexport function LoadTweets(callback) {\r\n    // getting html elements\r\n    const xhr = new XMLHttpRequest();\r\n    const method = \"GET\"; //POST\r\n    const url = \"http://localhost:8000/api/tweets\";\r\n    xhr.responseType = \"json\";\r\n    xhr.open(method, url);\r\n    xhr.onload = function () {\r\n        callback(xhr.response, xhr.status)\r\n    };\r\n    xhr.onerror = function (e) {\r\n        console.log(e);\r\n        callback({\"message\": \"the request was an error!\"}, 400)\r\n    };\r\n    xhr.send();\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetComponent} from \"./tweets\";\n\nfunction getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n\n\n\n\n\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <div>\n                    <TweetComponent/>\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {TweetComponent} from \"./tweets\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n\nconst tweetEl = document.getElementById(\"tweetme-2\");\nif (tweetEl) {\n    ReactDOM.render(<TweetComponent/>, tweetEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}